webpackJsonp([0],{

/***/ 960:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EducationDetailsPageModule", function() { return EducationDetailsPageModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_forms__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ionic_angular__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ionic2_rating__ = __webpack_require__(536);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__educationdetails__ = __webpack_require__(987);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// Components, functions, plugins




// Pages

let EducationDetailsPageModule = class EducationDetailsPageModule {
};
EducationDetailsPageModule = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__["NgModule"])({
        declarations: [__WEBPACK_IMPORTED_MODULE_4__educationdetails__["a" /* EducationDetailsPage */]],
        imports: [
            __WEBPACK_IMPORTED_MODULE_0__angular_forms__["a" /* FormsModule */],
            __WEBPACK_IMPORTED_MODULE_2_ionic_angular__["IonicPageModule"].forChild(__WEBPACK_IMPORTED_MODULE_4__educationdetails__["a" /* EducationDetailsPage */]),
            __WEBPACK_IMPORTED_MODULE_3_ionic2_rating__["a" /* Ionic2RatingModule */] // Put ionic2-rating module here
        ],
        exports: [__WEBPACK_IMPORTED_MODULE_4__educationdetails__["a" /* EducationDetailsPage */]]
    })
], EducationDetailsPageModule);

//# sourceMappingURL=educationdetails.module.js.map

/***/ }),

/***/ 980:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ReviewPage; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(6);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


/**
 * Generated class for the ReviewPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */
let ReviewPage = class ReviewPage {
    constructor(navCtrl, navParams) {
        this.navCtrl = navCtrl;
        this.navParams = navParams;
    }
    ionViewDidLoad() {
        console.log('ionViewDidLoad ReviewPage');
    }
};
ReviewPage = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'page-review',template:/*ion-inline-start:"C:\SVNProjects\NAEYC_Annual_v2\src\pages\review\review.html"*/'<!--\n  Generated template for the ReviewPage page.\n\n  See http://ionicframework.com/docs/components/#navigation for more info on\n  Ionic pages and navigation.\n-->\n<ion-header>\n    <ion-navbar color="primary">\n      <button ion-button menuToggle>\n        <ion-icon name="menu"></ion-icon>\n      </button>\n      <ion-title>Rate and Review </ion-title>\n    </ion-navbar>\n  </ion-header>\n\n\n\n<ion-content padding>\n\n\n    <ion-card>\n        <ion-card-header style="background:#5757A0; color:#fff">\n            Rate Speaker\n          </ion-card-header>\n          <ion-card-content>\n          <rating [(ngModel)]="rate" \n          readOnly="false">\n          max="5" <!--default value-->\n          emptyStarIconName="star-outline" <!--default value-->\n          halfStarIconName="star-half" <!--default value-->\n          starIconName="star" <!--default value-->\n          nullable="false" <!--default value-->\n          (ngModelChange)="onModelChange($event)"> <!--use it when you need to do something when user clicks on a star. in case you only need to change ngModel property, this property can be ommited.-->\n        </rating>\n      </ion-card-content>\n\n      </ion-card>\n\n\n      <ion-card>\n          <ion-card-header style="background:#5757A0; color:#fff">\n             Provide Comments\n            </ion-card-header>\n            <ion-card-content>\n                <ion-textarea></ion-textarea>\n        </ion-card-content>\n  \n        </ion-card>\n\n</ion-content>\n'/*ion-inline-end:"C:\SVNProjects\NAEYC_Annual_v2\src\pages\review\review.html"*/,
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__["NavController"], __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["NavParams"]])
], ReviewPage);

//# sourceMappingURL=review.js.map

/***/ }),

/***/ 987:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EducationDetailsPage; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ionic_angular__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ionic_storage__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__providers_database_database__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__providers_localstorage_localstorage__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_leaflet__ = __webpack_require__(193);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_leaflet___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_leaflet__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__login_login__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__myagenda_myagenda__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__review_review__ = __webpack_require__(980);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
// Components, functions, plugins







// Pages



let EducationDetailsPage = class EducationDetailsPage {
    constructor(navCtrl, navParams, storage, databaseprovider, cd, alertCtrl, events, loadingCtrl, localstorage) {
        this.navCtrl = navCtrl;
        this.navParams = navParams;
        this.storage = storage;
        this.databaseprovider = databaseprovider;
        this.cd = cd;
        this.alertCtrl = alertCtrl;
        this.events = events;
        this.loadingCtrl = loadingCtrl;
        this.localstorage = localstorage;
        this.btnAgendaManagement = true;
        this.AgendaButtonColor = '#ffffff';
        this.AgendaButtonTextColor = '#F15D22';
        this.btnNotes = true;
        this.btnPrint = true;
        this.btnEval = false;
        this.btnBookmarkManagement = true;
        this.BookmarkButtonColor = '#ffffff';
        this.BookmarkButtonTextColor = '#F15D22';
        // SubSection Control
        this.SpeakerHostShow = true;
        this.CorporateSupporterShow = true;
        this.AuthorsDisplay = false;
        this.AbstractDisplay = true;
        this.DescriptionDisplay = true;
        this.SubEventsDisplay = false;
        this.RecordingShow = true;
        this.HandoutShow = true;
        this.OtherInformationDisplay = true;
        this.SpeakerList = [];
    }
    ionViewDidLoad() {
        console.log('ionViewDidLoad EducationDetailsPage');
    }
    goToReviewPage() {
        // Otherwise just go to the page they want
        this.navCtrl.push(__WEBPACK_IMPORTED_MODULE_9__review_review__["a" /* ReviewPage */]);
    }
    mcqAnswer(value) {
        console.log(value);
    }
    SessionRatingChange(event) {
        console.log("Rating value: " + this.SessionRatingSelection);
        var StarRating;
        if (this.SessionRatingSelection == null) {
            StarRating = 0;
        }
        else {
            StarRating = this.SessionRatingSelection;
        }
        var AttendeeID = this.localstorage.getLocalValue('AttendeeID');
        var EventID = this.localstorage.getLocalValue('EventID');
        var flags = "rw|" + EventID + "|" + StarRating;
        console.log('AttendeeID: ' + AttendeeID);
        if ((AttendeeID == null) || (AttendeeID === null) || (AttendeeID.length == 0)) {
            this.SessionRatingSelection = null;
            this.cd.markForCheck();
            let alert = this.alertCtrl.create({
                title: 'Session Ratings',
                subTitle: 'You must be logged in to select a rating.',
                buttons: ['OK']
            });
            alert.present();
        }
        else {
            this.databaseprovider.getDatabaseStats(flags, AttendeeID).then(data => {
                // Nothing to do with the return data
            }).catch(function () {
                console.log("getDatabaseStats Promise Rejected");
            });
        }
    }
    ngOnInit() {
        var AttendeeID = this.localstorage.getLocalValue('AttendeeID');
        if (AttendeeID == '' || AttendeeID == null) {
            AttendeeID = '0';
        }
        // Load initial data set here
        //let loading = this.loadingCtrl.create({
        //	spinner: 'crescent',
        //	content: 'Please wait...'
        //});
        //loading.present();
        // Blank and show loading info
        this.cd.markForCheck();
        // Temporary use variables
        var flags = "dt|0|Alpha|" + this.navParams.get('EventID');
        this.EventID = this.navParams.get('EventID');
        this.localstorage.setLocalValue('EventID', this.navParams.get('EventID'));
        // ---------------------
        // Get Education Details
        // ---------------------
        var PrimarySpeakerName = "";
        var SQLDate;
        var DisplayDateTime;
        var dbEventDateTime;
        var courseID = "";
        var UpdatedEventDescription;
        var UpdatedEventDescription2;
        var HandoutPDFName = "";
        console.log('Education Details, flags: ' + flags);
        // Get course detail record
        this.databaseprovider.getLectureData(flags, AttendeeID).then(data => {
            console.log("getLectureData: " + JSON.stringify(data));
            if (data['length'] > 0) {
                PrimarySpeakerName = "";
                dbEventDateTime = data[0].session_start_time.substring(0, 19);
                dbEventDateTime = dbEventDateTime.replace(/-/g, '/');
                dbEventDateTime = dbEventDateTime.replace(/T/g, ' ');
                SQLDate = new Date(dbEventDateTime);
                DisplayDateTime = dateFormat(SQLDate, "mm/dd h:MMtt");
                // Display end time
                dbEventDateTime = data[0].session_end_time.substring(0, 19);
                dbEventDateTime = dbEventDateTime.replace(/-/g, '/');
                dbEventDateTime = dbEventDateTime.replace(/T/g, ' ');
                SQLDate = new Date(dbEventDateTime);
                DisplayDateTime = DisplayDateTime + " to " + dateFormat(SQLDate, "h:MMtt");
                if (data[0].primary_speaker == "") {
                    //PrimarySpeakerName = "No Assigned Primary Presenter";
                    PrimarySpeakerName = "";
                }
                else {
                    PrimarySpeakerName = data[0].primary_speaker;
                }
                this.SpeakerDisplayName = PrimarySpeakerName;
                this.EventName = data[0].session_title;
                this.EventSubName = "ID: " + data[0].session_id;
                if (data[0].RoomName.length == 0) {
                    this.DisplayEventTimeDateLocation = DisplayDateTime;
                }
                else {
                    this.DisplayEventTimeDateLocation = DisplayDateTime + " in " + data[0].RoomName;
                }
                //this.EventTypeName = data[0].EventTypeName;
                if ((data[0].speaker_host_emcee === undefined) || (data[0].speaker_host_emcee === "") || (data[0].speaker_host_emcee === null)) {
                    this.SpeakerHostShow = false;
                }
                else {
                    this.SpeakerHostEmcee = data[0].speaker_host_emcee;
                }
                if ((data[0].corporate_supporter === undefined) || (data[0].corporate_supporter === "") || (data[0].corporate_supporter === null)) {
                    this.CorporateSupporterShow = false;
                }
                else {
                    this.EventCorporateSupporter = data[0].corporate_supporter;
                }
                UpdatedEventDescription2 = data[0].description;
                UpdatedEventDescription2 = UpdatedEventDescription2.replace(/\\/g, '');
                this.sessionAbstract = UpdatedEventDescription2;
                console.log("Abstract: " + UpdatedEventDescription2);
                //this.EventID = data[0].session_id;
                HandoutPDFName = data[0].HandoutFilename + ".pdf";
                this.HandoutURL = "https://naeyc.convergence-us.com/naeyc/www/assets/Handouts/" + HandoutPDFName;
                this.HandoutFn = HandoutPDFName;
                courseID = data[0].course_id;
                this.localstorage.setLocalValue("PDFLink", data[0].course_id);
                // Values for Agenda Management
                this.localstorage.setLocalValue("AAOID", data[0].session_id);
                this.localstorage.setLocalValue("EventStartTime", data[0].session_start_time.substring(11, 19));
                this.localstorage.setLocalValue("EventEndTime", data[0].session_end_time.substring(11, 19));
                this.localstorage.setLocalValue("EventLocation", data[0].RoomName);
                this.localstorage.setLocalValue("EventName", data[0].session_title);
                this.localstorage.setLocalValue("EventDate", data[0].session_start_time.substring(0, 10));
                if (data[0].OnAgenda != null) {
                    this.visAgendaAddRemoveButton = "Remove";
                    this.AgendaButtonColor = '#F15D22';
                    this.AgendaButtonTextColor = '#ffffff';
                }
                else {
                    this.visAgendaAddRemoveButton = "Add";
                    this.AgendaButtonColor = '#ffffff';
                    this.AgendaButtonTextColor = '#F15D22';
                }
                // Values for Bookmark Management
                this.localstorage.setLocalValue("BookmarkID", data[0].session_id);
                this.localstorage.setLocalValue("BookmarkType", "Sessions");
                if (data[0].Bookmarked != "0") {
                    this.visBookmarkAddRemoveButton = "Remove";
                    this.BookmarkButtonColor = '#F15D22';
                    this.BookmarkButtonTextColor = '#ffffff';
                }
                else {
                    this.visBookmarkAddRemoveButton = "Bookmark";
                    this.BookmarkButtonColor = '#ffffff';
                    this.BookmarkButtonTextColor = '#F15D22';
                }
                // Session ratings
                this.SessionRatingSelection = "4";
                if (data[0].ce_credits_type == "") {
                    this.AbstractDisplay = false;
                }
                else {
                    this.DescriptionDisplay = false;
                }
                if ((data[0].description === undefined) || (data[0].description === "") || (data[0].description === null)) {
                    this.AbstractDisplay = false;
                    this.DescriptionDisplay = false;
                }
                if (data[0].session_recording.trim() == "N") {
                    this.RecordingShow = false;
                }
                console.log('HandoutFilename: ' + HandoutPDFName);
                if (data[0].HandoutFilename === "" || data[0].HandoutFilename === null) {
                    this.HandoutShow = false;
                }
                // Other Information grid
                if (data[0].PrimaryAudience != '') {
                    var PrimaryAudience = data[0].PrimaryAudience.replace(/; /g, '\r\n');
                    this.vSessionPrimaryAudience = PrimaryAudience;
                }
                else {
                    this.vSessionPrimaryAudience = "";
                }
                if (data[0].AgeLevel != '') {
                    var AgeLevel = data[0].AgeLevel.replace(/; /g, '\r\n');
                    this.vSessionAgeLevel = AgeLevel;
                }
                else {
                    this.vSessionAgeLevel = "";
                }
                this.vSessionCourseID = data[0].session_id;
                this.vSessionFloorRoom = data[0].FloorNumber + " / " + data[0].RoomName;
                // Removed on 6/1/2018 by Lauren
                // Leaving code in place because it can 
                // be used by other clients like AACD
                //this.vSessionCapacity = data[0].room_capacity;
                //this.vSessionSetup = data[0].room_setup;
                // Status checks
                var SessionStatus = "";
                var StatusStyle = "SessionStatusNormal";
                // Room Capacity check
                if (parseInt(data[0].room_capacity) <= parseInt(data[0].Attendees)) {
                    SessionStatus = "Popular Course Nearing Capacity";
                    StatusStyle = "SessionStatusRed";
                }
                // Waitlist check
                if (data[0].Waitlist == "1") {
                    if (SessionStatus == "") {
                        SessionStatus = "You are Waitlisted";
                        StatusStyle = "SessionStatusRed";
                    }
                    else {
                        SessionStatus = SessionStatus + " / You are Waitlisted";
                        StatusStyle = "SessionStatusRed";
                    }
                }
                // Cancellation check
                if (data[0].CancelledYN == "Y") {
                    SessionStatus = "CANCELLED";
                    StatusStyle = "SessionStatusRed";
                }
                console.log(SessionStatus);
                this.SessionStatusStyle = StatusStyle;
                this.SessionStatus = SessionStatus;
                // ---------------------------
                // Get Linked Speakers
                // ---------------------------
                this.AuthorsDisplay = false;
                if (data[0].ce_credits_type == "") {
                    // Keep hidden for non-CE events
                    console.log('Non-CE event');
                    this.OtherInformationDisplay = false;
                    this.cd.markForCheck();
                    //loading.dismiss();
                }
                else {
                    console.log('Loading speakers');
                    flags = "cd|Alpha|0|0|" + courseID;
                    // Get speaker detail record
                    this.databaseprovider.getSpeakerData(flags, AttendeeID).then(data2 => {
                        console.log("getSpeakerData: " + JSON.stringify(data2));
                        if (data2['length'] > 0) {
                            // Process returned records to display
                            this.SpeakerList = [];
                            var DisplayName = "";
                            for (var i = 0; i < data2['length']; i++) {
                                DisplayName = "";
                                // Concatenate fields to build displayable name
                                DisplayName = DisplayName + data2[i].FirstName;
                                //if (resA.rows.item(i).MiddleInitial != "") {
                                //    DisplayName = DisplayName + " " + data2[i].MiddleInitial;
                                //}
                                DisplayName = DisplayName + " " + data2[i].LastName;
                                //if (data2[i].imis_designation != "" && data2[i].imis_designation != null) {
                                //    DisplayName = DisplayName + ", " + data2[i].imis_designation;
                                //}
                                //if (data2[i].Credentials != "") {
                                //	DisplayName = DisplayName + " " + data2[i].Credentials;
                                //}
                                var imageAvatar = data2[i].imageFilename;
                                imageAvatar = imageAvatar.substr(0, imageAvatar.length - 3) + 'png';
                                //console.log("imageAvatar: " + imageAvatar);
                                imageAvatar = "assets/img/speakers/" + imageAvatar;
                                this.SpeakerList.push({
                                    speakerIcon: "person",
                                    speakerAvatar: imageAvatar,
                                    navigationArrow: "arrow-dropright",
                                    SpeakerID: data2[i].speakerID,
                                    DisplayNameLastFirst: DisplayName,
                                    DisplayCredentials: data2[i].Title
                                    //Affiliation: data2[i].Affiliation
                                });
                            }
                            this.AuthorsDisplay = true;
                        }
                        this.cd.markForCheck();
                        //loading.dismiss();
                    }).catch(function () {
                        console.log("Speaker Promise Rejected");
                    });
                }
                // --------------------
                // Session room mapping
                // --------------------
                console.log('Session room mapping');
                var y = 0;
                var x = 0;
                var RoomName = "";
                var FloorNumber = "";
                if (data[0].RoomY != null) {
                    y = data[0].RoomY;
                    x = data[0].RoomX;
                }
                RoomName = data[0].RoomName;
                FloorNumber = data[0].FloorNumber;
                console.log("Session room (x,y): " + x + ", " + y);
                console.log("Session floor: " + FloorNumber);
                if ((x === undefined) || (y === undefined)) {
                    // Show empty map
                    console.log('Show empty map');
                    this.myMap = __WEBPACK_IMPORTED_MODULE_6_leaflet__["map"]('map2', {
                        crs: __WEBPACK_IMPORTED_MODULE_6_leaflet__["CRS"].Simple,
                        minZoom: 0,
                        maxZoom: 2,
                        zoomControl: false
                    });
                    var bounds = __WEBPACK_IMPORTED_MODULE_6_leaflet__["latLngBounds"]([0, 0], [1500, 2000]); // Normally 1000, 1000; stretched to 2000,1000 for AACD 2017
                    var image = __WEBPACK_IMPORTED_MODULE_6_leaflet__["imageOverlay"]('assets/img/SessionFloorplan.png', bounds, {
                        attribution: 'Convergence'
                    }).addTo(this.myMap);
                    this.myMap.fitBounds(bounds);
                    this.myMap.setMaxBounds(bounds);
                }
                else {
                    // Simple coordinate system mapping
                    console.log('Simple coordinate system mapping');
                    this.myMap = __WEBPACK_IMPORTED_MODULE_6_leaflet__["map"]('map2', {
                        crs: __WEBPACK_IMPORTED_MODULE_6_leaflet__["CRS"].Simple,
                        minZoom: -2,
                        maxZoom: 0,
                        zoomControl: true
                    });
                    // Determine which session floorplan to display
                    switch (FloorNumber) {
                        case "2":
                            var bounds = __WEBPACK_IMPORTED_MODULE_6_leaflet__["latLngBounds"]([0, 0], [1500, 2000]); // Normally 1000, 1000; stretched to 2000,1000 for AACD 2017
                            var image = __WEBPACK_IMPORTED_MODULE_6_leaflet__["imageOverlay"]('assets/img/SessionFloorplanLevel2.png', bounds, {
                                attribution: 'Convergence'
                            }).addTo(this.myMap);
                            break;
                        case "3":
                            var bounds = __WEBPACK_IMPORTED_MODULE_6_leaflet__["latLngBounds"]([0, 0], [1500, 2000]); // Normally 1000, 1000; stretched to 2000,1000 for AACD 2017
                            var image = __WEBPACK_IMPORTED_MODULE_6_leaflet__["imageOverlay"]('assets/img/SessionFloorplanLevel3.png', bounds, {
                                attribution: 'Convergence'
                            }).addTo(this.myMap);
                            break;
                        case "4":
                            var bounds = __WEBPACK_IMPORTED_MODULE_6_leaflet__["latLngBounds"]([0, 0], [1500, 2000]); // Normally 1000, 1000; stretched to 2000,1000 for AACD 2017
                            var image = __WEBPACK_IMPORTED_MODULE_6_leaflet__["imageOverlay"]('assets/img/SessionFloorplanLevel4.png', bounds, {
                                attribution: 'Convergence'
                            }).addTo(this.myMap);
                            break;
                    }
                    this.myMap.fitBounds(bounds);
                    this.myMap.setMaxBounds(bounds);
                    var SessionName = __WEBPACK_IMPORTED_MODULE_6_leaflet__["latLng"]([y, x]);
                    __WEBPACK_IMPORTED_MODULE_6_leaflet__["marker"](SessionName).addTo(this.myMap)
                        .bindPopup(RoomName)
                        .openPopup();
                    this.myMap.setView([y, x], 1);
                }
            }
        }).catch(function () {
            console.log("Course Promise Rejected");
        });
        // -------------------
        // Get Attendee Status
        // -------------------
        console.log('Attendee Button Management, AttendeeID: ' + AttendeeID);
        if (AttendeeID == '0') {
            this.btnNotes = false;
            this.btnAgendaManagement = false;
            this.btnBookmarkManagement = false;
        }
        else {
            this.btnNotes = true;
            this.btnAgendaManagement = true;
            this.btnBookmarkManagement = true;
        }
    }
    SpeakerDetails(SpeakerID) {
        if (SpeakerID != 0) {
            // Navigate to Speaker Details page
            this.navCtrl.push('SpeakerDetailsPage', { SpeakerID: SpeakerID }, { animate: true, direction: 'forward' });
        }
    }
    ;
    printWindow() {
        window.open('https://www.google.com/cloudprint/#printers', '_system');
    }
    ;
    openPDF(PDFURL) {
        var ref = window.open(PDFURL, '_system');
    }
    ;
    navToMyAgenda() {
        var AttendeeID = this.localstorage.getLocalValue('AttendeeID');
        if (AttendeeID != '' && AttendeeID != null) {
            // If not, store the page they want to go to and go to the Login page
            console.log('Stored AttendeeID: ' + AttendeeID);
            this.localstorage.setLocalValue('NavigateToPage', "MyAgenda");
            this.navCtrl.push(__WEBPACK_IMPORTED_MODULE_7__login_login__["a" /* LoginPage */], {}, { animate: true, direction: 'forward' });
        }
        else {
            // Otherwise just go to the page they want
            this.navCtrl.push(__WEBPACK_IMPORTED_MODULE_8__myagenda_myagenda__["a" /* MyAgenda */], {}, { animate: true, direction: 'forward' });
        }
    }
    ;
    navToNotes(EventID) {
        console.log("NoteDetails: " + EventID);
        var AttendeeID = this.localstorage.getLocalValue('AttendeeID');
        if (AttendeeID == '' || AttendeeID == null) {
            // If not, store the page they want to go to and go to the Login page
            console.log('Stored AttendeeID: ' + AttendeeID);
            this.localstorage.setLocalValue('NavigateToPage', "NotesDetailsPage");
            this.navCtrl.push(__WEBPACK_IMPORTED_MODULE_7__login_login__["a" /* LoginPage */], {}, { animate: true, direction: 'forward' });
        }
        else {
            // Otherwise just go to the page they want
            this.navCtrl.push('NotesDetailsPage', { EventID: EventID }, { animate: true, direction: 'forward' });
        }
    }
    ;
    AgendaManagement() {
        console.log("Begin AgendaManagement process...");
        var AttendeeID = this.localstorage.getLocalValue('AttendeeID');
        var AAOID = this.localstorage.getLocalValue("AAOID");
        var EventID = this.localstorage.getLocalValue("EventID");
        var EventStartTime = this.localstorage.getLocalValue("EventStartTime");
        var EventEndTime = this.localstorage.getLocalValue("EventEndTime");
        var EventLocation = this.localstorage.getLocalValue("EventLocation");
        var EventName = this.localstorage.getLocalValue("EventName");
        EventName = EventName.replace(/'/g, "''");
        var EventDate = this.localstorage.getLocalValue("EventDate");
        var flags = '';
        // Starting variables
        console.log("AttendeeID: " + AttendeeID);
        console.log("AAOID: " + AAOID);
        console.log("EventID: " + EventID);
        console.log("EventStartTime: " + EventStartTime);
        console.log("EventEndTime: " + EventEndTime);
        console.log("EventLocation: " + EventLocation);
        console.log("EventName: " + EventName);
        console.log("EventDate: " + EventDate);
        this.cd.markForCheck();
        var LastUpdateDate = "";
        LastUpdateDate = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
        if (this.visAgendaAddRemoveButton == "Add") {
            // ------------------------
            // Add item to Agenda
            // ------------------------
            flags = 'ad|0|' + EventID + '|' + EventStartTime + '|' + EventEndTime + '|' + EventLocation + '|' + EventName + '|' + EventDate + '|' + AAOID + '|' + LastUpdateDate;
            console.log("flags: " + flags);
            this.databaseprovider.getAgendaData(flags, AttendeeID).then(data => {
                console.log("getAgendaData: " + JSON.stringify(data));
                if (data['length'] > 0) {
                    console.log("Return status: " + data[0].AddStatus);
                    if (data[0].AddStatus == "Success") {
                        this.events.publish('user:Status', 'AgendaItem Add');
                        this.visAgendaAddRemoveButton = "Remove";
                        this.AgendaButtonColor = '#F15D22';
                        this.AgendaButtonTextColor = '#ffffff';
                        this.cd.markForCheck();
                    }
                    else {
                        console.log("Return query: " + data[0].AddQuery);
                        let alert = this.alertCtrl.create({
                            title: 'Agenda Item',
                            subTitle: 'Unable to add the item to your agenda at this time. Please try again shortly.',
                            buttons: ['OK']
                        });
                        alert.present();
                    }
                }
            }).catch(function () {
                console.log("Promise Rejected");
            });
        }
        else {
            // -----------------------
            // Remove Item from Agenda
            // -----------------------
            flags = 'dl|0|' + EventID + '|' + EventStartTime + '|' + EventEndTime + '|' + EventLocation + '|' + EventName + '|' + EventDate + '|' + AAOID + '|' + LastUpdateDate;
            console.log("flags: " + flags);
            this.databaseprovider.getAgendaData(flags, AttendeeID).then(data => {
                console.log("getAgendaData: " + JSON.stringify(data));
                if (data['length'] > 0) {
                    console.log("Return status: " + data[0].DeleteStatus);
                    if (data[0].DeleteStatus == "Success") {
                        this.events.publish('user:Status', 'AgendaItem Remove');
                        this.visAgendaAddRemoveButton = "Add";
                        this.AgendaButtonColor = '#ffffff';
                        this.AgendaButtonTextColor = '#F15D22';
                        this.cd.markForCheck();
                    }
                    else {
                        console.log("Return query: " + data[0].DeleteQuery);
                        let alert = this.alertCtrl.create({
                            title: 'Agenda Item',
                            subTitle: 'Unable to remove the item from your agenda at this time. Please try again shortly.',
                            buttons: ['OK']
                        });
                        alert.present();
                    }
                }
            }).catch(function () {
                console.log("Promise Rejected");
            });
        }
    }
    ;
    BookmarkManagement() {
        console.log("Begin BookmarkManagement process...");
        var AttendeeID = this.localstorage.getLocalValue('AttendeeID');
        var BookmarkType = this.localstorage.getLocalValue("BookmarkType");
        var BookmarkID = this.localstorage.getLocalValue("BookmarkID");
        var flags = '';
        // Starting variables
        console.log("AttendeeID: " + AttendeeID);
        console.log("BookmarkType: " + BookmarkType);
        console.log("BookmarkID: " + BookmarkID);
        this.cd.markForCheck();
        var LastUpdateDate = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
        if (this.visBookmarkAddRemoveButton == "Bookmark") {
            // ------------------------
            // Add item to Bookmarks List
            // ------------------------
            flags = 'cb|0|' + BookmarkType + '|' + BookmarkID;
            console.log("flags: " + flags);
            this.databaseprovider.getBookmarksData(flags, AttendeeID).then(data => {
                console.log("getBookmarksData: " + JSON.stringify(data));
                if (data['length'] > 0) {
                    console.log("Return status: " + data[0].Status);
                    if (data[0].Status == "Saved") {
                        this.visBookmarkAddRemoveButton = "Remove";
                        this.BookmarkButtonColor = '#F15D22';
                        this.BookmarkButtonTextColor = '#ffffff';
                        this.cd.markForCheck();
                    }
                    else {
                        console.log("Return query: " + data[0].Query);
                        let alert = this.alertCtrl.create({
                            title: 'Bookmarks',
                            subTitle: 'Unable to add the item to your bookmark list at this time. Please try again shortly.',
                            buttons: ['OK']
                        });
                        alert.present();
                    }
                }
            }).catch(function () {
                console.log("Promise Rejected");
            });
        }
        else {
            // -----------------------
            // Remove Item from Bookmarks List
            // -----------------------
            flags = 'rb|0|' + BookmarkType + '|' + BookmarkID;
            console.log("flags: " + flags);
            this.databaseprovider.getBookmarksData(flags, AttendeeID).then(data => {
                console.log("getBookmarksData: " + JSON.stringify(data));
                if (data['length'] > 0) {
                    console.log("Return status: " + data[0].Status);
                    if (data[0].Status == "Saved") {
                        this.visBookmarkAddRemoveButton = "Bookmark";
                        this.BookmarkButtonColor = '#ffffff';
                        this.BookmarkButtonTextColor = '#F15D22';
                        this.cd.markForCheck();
                    }
                    else {
                        console.log("Return query: " + data[0].Query);
                        let alert = this.alertCtrl.create({
                            title: 'Bookmarks',
                            subTitle: 'Unable to remove the item from your bookmark list at this time. Please try again shortly.',
                            buttons: ['OK']
                        });
                        alert.present();
                    }
                }
            }).catch(function () {
                console.log("Promise Rejected");
            });
        }
    }
    ;
};
EducationDetailsPage = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'page-educationdetails',template:/*ion-inline-start:"C:\SVNProjects\NAEYC_Annual_v2\src\pages\educationdetails\educationdetails.html"*/'<ion-header>\n\n  <ion-navbar color="primary">\n    <button ion-button menuToggle>\n      <ion-icon name="menu"></ion-icon>\n    </button>\n    <ion-title>Education Details</ion-title>\n  </ion-navbar>\n\n</ion-header>\n\n<ion-content>\n\n	<div style="margin:10px!important">\n		<h2>{{EventName}}</h2>\n		<p>{{EventSubName}}</p>\n		<p>{{DisplayEventTimeDateLocation}}</p>\n		<p>{{SpeakerDisplayName}}</p>\n		<p>{{EventTypeName}}</p>\n		<p [ngClass]="SessionStatusStyle">{{SessionStatus}}</p>\n	</div>\n\n	<div class="button-bar" style="margin:10px!important">\n\n		<button ion-button outline color=danger *ngIf="btnAgendaManagement" (click)="AgendaManagement()" [style.background-color]="AgendaButtonColor" [style.color]="AgendaButtonTextColor">\n			<div>\n				<ion-icon name="calendar"></ion-icon>\n				<label>{{visAgendaAddRemoveButton}}</label>\n			</div>\n		</button>\n		<button ion-button outline color=danger  *ngIf="btnNotes" (click)="navToNotes(EventID)">\n			<div>\n				<ion-icon name="create"></ion-icon>\n				<label></label>\n			</div>\n		</button>\n\n		<button ion-button outline color=danger *ngIf="btnEval" (click)="goToReviewPage()">\n			<div>\n				<ion-icon name="create"></ion-icon>\n				<label></label>\n			</div>\n		</button>\n\n		<button ion-button outline color=danger *ngIf="btnPrint" (click)="printWindow()">\n			<div>\n				<ion-icon name="print"></ion-icon>\n				<label></label>\n			</div>\n		</button>\n		<button ion-button outline color=danger *ngIf="btnBookmarkManagement" (click)="BookmarkManagement()" [style.background-color]="BookmarkButtonColor" [style.color]="BookmarkButtonTextColor">\n			<div>\n				<ion-icon name=""></ion-icon>\n				<label>{{visBookmarkAddRemoveButton}}</label>\n			</div>\n		</button>\n\n	</div>\n\n	<div class="button-bar" style="margin:10px!important">\n\n		<rating\n			[ngModel]="SessionRatingSelection"\n			readOnly="false"\n			max="5"\n			emptyStarIconName="star-outline"\n			halfStarIconName="star-half"\n			starIconName="star"\n			nullable="true"\n			(ngModelChange)="SessionRatingChange($event)">\n		</rating>\n\n	</div>\n\n	<div>\n		<p *ngIf="SpeakerHostShow" class="myLabelBold myHeader">\n			Speaker Host / Emcee\n		</p>\n	</div>\n	<div *ngIf="SpeakerHostShow" class="list">\n		{{SpeakerHostEmcee}}\n	</div>\n		<p *ngIf="CorporateSupporterShow" class="myLabelBold myHeader">\n			Corporate Supporter\n		</p>\n	<div *ngIf="CorporateSupporterShow" class="list">\n		{{EventCorporateSupporter}}\n	</div>\n\n	<ion-card>\n\n		<ion-card-header class="cardHeader" *ngIf="AuthorsDisplay">\n			Speakers\n		</ion-card-header>\n\n		<ion-card-content *ngIf="AuthorsDisplay">\n\n			<ion-list id="author-list3">\n				<ion-item (click)="SpeakerDetails(speaker.SpeakerID)" *ngFor="let speaker of SpeakerList" id="speakersessions-list-item19">\n				\n					<ion-avatar item-start>\n						<img src="{{speaker.speakerAvatar}}" onerror="this.src=\'assets/img/personIcon.png\'">\n					</ion-avatar>\n					<!--<ion-icon item-right  name=bookmarks></ion-icon>-->\n					<ion-icon item-right name="{{speaker.navigationArrow}}"></ion-icon>\n					<h2>{{speaker.DisplayNameLastFirst}}</h2>\n					{{speaker.DisplayCredentials}}\n				</ion-item>\n			</ion-list>\n		</ion-card-content>\n\n	</ion-card>\n\n\n	<ion-card>\n\n		<ion-card-header class="cardHeader" *ngIf="AuthorsDisplay">\n			<div style="color:#fff" *ngIf="AbstractDisplay">\n				Abstract\n			</div>\n		</ion-card-header>\n\n		<ion-card-content>\n\n			<div *ngIf="AbstractDisplay" [innerHTML]="sessionAbstract" class="myMarginTopBottom">\n				{{EventDetails}}\n			</div>\n		</ion-card-content>\n\n	</ion-card>\n\n	<p *ngIf="DescriptionDisplay" class="myLabelBold myHeader">\n		Description\n	</p>\n	<div *ngIf="DescriptionDisplay" [innerHTML]="sessionAbstract" class="myMarginTopBottom">\n		{{EventDetails}}\n	</div>\n	<p *ngIf="SubEventsDisplay" class="myLabelBold myHeader">\n		SubEvents\n	</p>\n	<ion-list id="session-list3">\n		<ion-item (click)="EventDetails(session.EventID)" *ngFor="let session of sessions" id="speakersessions-list-item20">\n			<div style="float: left; padding-right: 10px;">\n				<ion-icon name="{{session.eventTypeIcon}}"></ion-icon>\n			</div>\n			<div>\n				<p class="myLabelBold">\n					{{session.DisplayEventName}}\n				</p>\n				<p>\n					{{session.DisplayEventTimeDateLocation}}\n				</p>\n			</div>\n			<div style="float: right">\n				<ion-icon name="{{session.navigationArrow}}"></ion-icon>\n			</div>\n		</ion-item>\n	</ion-list>\n	<p *ngIf="RecordingShow" class="myLabelBold myHeader">\n		Session Recording\n	</p>\n	<div *ngIf="RecordingShow" class="list">\n		<ion-icon item-left name="mic" style="padding-right: 10px;"></ion-icon>\n		This session is being recorded.\n	</div>\n	<p *ngIf="HandoutShow" class="myLabelBold myHeader">\n		Handout\n	</p>\n	<div *ngIf="HandoutShow" class="list" (click)="openPDF(HandoutURL)">\n		<ion-icon item-left name="cloud-download" style="padding-right: 10px;"></ion-icon>\n		{{HandoutFn}}\n	</div>\n\n	<ion-card>\n\n		<ion-card-header class="cardHeader" *ngIf="OtherInformationDisplay">\n			Other Information\n		</ion-card-header>\n		  \n		<ion-card-content>\n			<div class="myMarginTopBottom" *ngIf="OtherInformationDisplay">\n				<ion-row>\n					<ion-col>\n						<ion-item no-lines>\n							<ion-label style="white-space: pre-wrap;"><b>Primary Audience</b><br/>{{vSessionPrimaryAudience}}</ion-label>\n						</ion-item>\n					</ion-col>\n					<ion-col>\n						<ion-item no-lines>\n							<ion-label style="white-space: pre-wrap;"><b>Age Level</b><br/>{{vSessionAgeLevel}}</ion-label>\n						</ion-item>\n					</ion-col>\n				</ion-row>\n				<ion-row>\n					<ion-col>\n						<ion-item no-lines>\n							<ion-label><b>Course ID</b><br/>{{vSessionCourseID}}</ion-label>\n						</ion-item>\n					</ion-col>\n					<ion-col>\n						<ion-item no-lines>\n							<ion-label><b>Floor / Room</b><br/>{{vSessionFloorRoom}}</ion-label>\n						</ion-item>\n					</ion-col>\n				</ion-row>\n				<!-- Removed on 6/1/2018 by Lauren\n				     Leaving code in place because it can \n					 be used by other clients like AACD\n				<ion-row>\n					<ion-col>\n						<ion-item no-lines>\n							<ion-label><b>Room Capacity</b><br/>{{vSessionCapacity}}</ion-label>\n						</ion-item>\n					</ion-col>\n					<ion-col>\n						<ion-item no-lines>\n							<ion-label><b>Room Setup</b><br/>{{vSessionSetup}}</ion-label>\n						</ion-item>\n					</ion-col>\n				</ion-row>\n				-->\n			</div>\n		</ion-card-content>\n		  \n	</ion-card>\n\n	<ion-card>\n\n		<ion-card-header class="cardHeader">\n			Locator\n		</ion-card-header>\n\n		<ion-card-content>\n			<div id="map2" style="width:100%; height:400px;"></div>\n		</ion-card-content>\n\n	</ion-card>\n\n</ion-content>\n'/*ion-inline-end:"C:\SVNProjects\NAEYC_Annual_v2\src\pages\educationdetails\educationdetails.html"*/,
        changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush
    }),
    __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1_ionic_angular__["NavController"],
        __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["NavParams"],
        __WEBPACK_IMPORTED_MODULE_2__ionic_storage__["b" /* Storage */],
        __WEBPACK_IMPORTED_MODULE_4__providers_database_database__["a" /* Database */],
        __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"],
        __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["AlertController"],
        __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["Events"],
        __WEBPACK_IMPORTED_MODULE_1_ionic_angular__["LoadingController"],
        __WEBPACK_IMPORTED_MODULE_5__providers_localstorage_localstorage__["a" /* Localstorage */]])
], EducationDetailsPage);

//# sourceMappingURL=educationdetails.js.map

/***/ })

});
//# sourceMappingURL=0.js.map