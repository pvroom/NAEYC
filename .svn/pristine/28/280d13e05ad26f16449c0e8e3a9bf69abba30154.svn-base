// Components, functions, plugins
import { Component, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef, NgModule, ErrorHandler, Injectable, Injector } from '@angular/core';
import { NavController, Nav, Platform, AlertController, App, IonicApp, IonicErrorHandler, IonicModule, MenuController } from 'ionic-angular';
import { LoadingController, Events } from 'ionic-angular';
import { Storage } from '@ionic/storage';
import { StatusBar } from '@ionic-native/status-bar';
import { SplashScreen } from '@ionic-native/splash-screen';
import { Database } from "../providers/database/database";
import { Localstorage } from '../providers/localstorage/localstorage';
import { OneSignal } from '@ionic-native/onesignal';
import { ImageLoaderConfig } from 'ionic-image-loader';



// Pages
import { HomePage } from '../pages/home/home';
import { ConferenceCityPage } from '../pages/conferencecity/conferencecity';
import { SocialPage } from '../pages/social/social';
import { MorePage } from '../pages/more/more';
import { HelpPage } from '../pages/help/help';
import { SpeakersPage } from '../pages/speakers/speakers';
import { ProgramPage } from '../pages/program/program';
import { AttendeesPage } from '../pages/attendees/attendees';
import { MapPage } from '../pages/map/map';
import { LoginPage } from '../pages/login/login';
import { ExhibitorsPage } from '../pages/exhibitors/exhibitors';
import { NotesPage } from '../pages/notes/notes';
import { MyAgenda } from '../pages/myagenda/myagenda';
import { MyAgendaFull } from '../pages/myagendafull/myagendafull';
import { EvaluationConference } from '../pages/evaluationconference/evaluationconference';
import { ActivityPage } from '../pages/activity/activity';
import { ProfilePage } from '../pages/profile/profile';
import { NotificationsPage } from '../pages/notifications/notifications';
import { NetworkingPage } from '../pages/networking/networking';
import { AttendeeBookmarksPage } from '../pages/attendeebookmarks/attendeebookmarks';
//import { ReviewPage } from '../pages/review/review';
import { ContactsPage } from '../pages/contacts/contacts';
//import { SettingPage } from '../pages/setting/setting';
import { SponsorsPage } from '../pages/sponsors/sponsors';
import { SplashPage } from '../pages/splash/splash';
//import { GoogleAnalytics } from '@ionic-native/google-analytics';
 

// Temporary Support Pages
//import { FloorplanMappingPage } from '../pages/floorplanmapping/floorplanmapping';

declare var formatTime: any;
declare var dateFormat: any;

@Component({
	templateUrl: 'app.html',
	changeDetection: ChangeDetectionStrategy.OnPush
})
export class MyApp {

	@ViewChild(Nav) navCtrl: Nav;

	rootPage: any = HomePage;
	loader: any;
	pages: Array<{title: string, icon: string, component: any, naventry: string}>;
	activePage: any;
	public upcomingAgendaItems: any[] = [];
	public DevicePlatform: string;

	public appInfo: any;
	public deployInfo: any;

	
	constructor(
		public pltfrm: Platform,
		private statusBar: StatusBar,
		public loadingCtrl: LoadingController,
		public storage: Storage,
		public splashScreen: SplashScreen,
		public alertCtrl: AlertController, 
		private oneSignal: OneSignal,
		//private IonicPro: Pro,
		public imageLoaderConfig: ImageLoaderConfig,
		public events: Events,
		public menuCtrl: MenuController,
		private cd: ChangeDetectorRef,
		private databaseprovider: Database,
		private localstorage: Localstorage) {


		
		this.initializeApp();

		
		//this.enableIonicPro();
		
		// used for an example of ngFor and navigation
		this.pages = [
		  { title: 'Home', icon: 'home', component: HomePage, naventry: 'Home' },
		  { title: 'Program', icon: 'list', component: ProgramPage, naventry: 'Program' },
		  { title: 'Speakers', icon: 'mic', component: SpeakersPage, naventry: 'Speakers' },
		  { title: 'My Agenda', icon: 'calendar', component: MyAgenda, naventry: 'MyAgenda' },
		  { title: 'Exhibitors', icon: 'people', component: ExhibitorsPage, naventry: 'Exhibitors' },
		  { title: 'Sponsors', icon: 'ribbon', component: SponsorsPage, naventry: 'Sponsors' },
		  { title: 'Maps', icon: 'map', component: MapPage, naventry: 'Map' },
		  { title: 'Washington DC', icon: 'compass', component: ConferenceCityPage, naventry: 'ConferenceCity' },
		  { title: 'Networking', icon: 'contacts', component: NetworkingPage, naventry: 'Networking' },
		  { title: 'Help', icon: 'help', component: HelpPage, naventry: 'Help' },
		  { title: 'Notes', icon: 'create', component: NotesPage, naventry: 'Notes' },
		  //{ title: 'Review', icon: 'star-half', component: ReviewPage, naventry: 'Review' },
		  { title: 'Bookmarks', icon: 'bookmark', component: AttendeeBookmarksPage, naventry: 'Bookmarks' },
		  //{ title: 'Splash', icon: 'image', component: SplashPage, naventry: 'Splash' },
		  //{ title: 'Event Survey', icon: 'checkbox-outline', component: EvaluationConference, naventry: 'EventSurvey' },
		  { title: 'Attendees', icon: 'more', component: AttendeesPage, naventry: 'Attendees' },
		  { title: 'More', icon: 'more', component: MorePage, naventry: 'More' },
		  { title: 'Sign In / Out', icon: 'log-in', component: LoginPage, naventry: 'Login' }

		];

		this.activePage = this.pages[0];

		// Listen for login/logout events and 
		// refresh side menu dashboard
		this.events.subscribe('user:Status', (LoginType) => {
			console.log('AppComponents: User has ', LoginType);
			this.LoadSideMenuDashboard();
		});


	}

	LoadSideMenuDashboard() {
		

		// Temporary use variables
		var flags;
		var visStartTime;
		var visEndTime;
		var eventIcon;
		var visEventName;
		var maxRecs;
		
		// Get the data
		var AttendeeID = this.localstorage.getLocalValue('AttendeeID');
		
		if (AttendeeID != '' && AttendeeID != null) {

			flags = "li2|0";
			
			this.databaseprovider.getAgendaData(flags, AttendeeID).then(data => {
				
				console.log('AppComponents: Getting agenda data for side menu');

				if (data['length']>0) {
					
					this.upcomingAgendaItems = [];

					console.log('AppComponents: Looping through data for side menu');
					
					if (data['length'] > 4) {
						maxRecs = 4;
					} else {
						maxRecs = data['length'];
					}
					
					for (var i = 0; i < maxRecs; i++) {

						var dbEventDateTime = data[i].EventDate.substring(5, 10);
						var DisplayDateTime = dbEventDateTime.replace(/-/g, '/');

						visStartTime = formatTime(data[i].EventStartTime);
						visEndTime = formatTime(data[i].EventEndTime);
						
						DisplayDateTime = DisplayDateTime + " from " + visStartTime + " to " + visEndTime;
						
						if (data[i].mtgID == "0") {
							eventIcon = "time";
							visEventName = data[i].EventName;
						} else {
							eventIcon = "list-box";
							visEventName = data[i].EventName;
						}
						//console.log('AppComponents: Setting icon to: ' + eventIcon);
						//console.log('AppComponents: Setting name to: ' + visEventName);
						//console.log('AppComponents: Setting EventID to: ' + data[i].EventID);
						
						this.upcomingAgendaItems.push({
							EventName: visEventName,
							visEventTimeframe: DisplayDateTime,
							visEventID: "'" + data[i].EventID + "|" + data[i].mtgID + "'",
							EventLocation: data[i].EventLocation,
							eventTypeIcon: eventIcon
						});

					}


				} else {
					
					this.upcomingAgendaItems = [];

					this.upcomingAgendaItems.push({
						EventName: "No upcoming agenda entries",
						visEventTimeframe: "",
						EventLocation: "",
						visEventID: "'0|0'",
						eventTypeIcon: "remove-circle"
					});

				}

				this.cd.markForCheck();
				
			}).catch(function () {
				console.log("AppComponents: Promise Rejected");
			});
						
		} else {
			
			this.upcomingAgendaItems = [];

			this.upcomingAgendaItems.push({
				EventName: "You need to be logged in to see your agenda",
				visEventTimeframe: "",
				EventLocation: "",
				visEventID: "'0|0'",
				eventTypeIcon: "remove-circle"
			});
			
			this.cd.markForCheck();
			
		}

	}

	initializeApp() {
		this.pltfrm.ready().then(() => {
			// Okay, so the platform is ready and our plugins are available.
			// Here you can do any higher level native things you might need.
			this.statusBar.styleDefault();
			
			console.log('AppComponents: initializeApp accessed');

			// Set default value
			this.DevicePlatform = "Browser";

			// Determine if we are running on a device
			if (this.pltfrm.is('android')) {
				console.log("AppComponents: Running on Android device");
				this.DevicePlatform = "Android";
			}
			if (this.pltfrm.is('ios')) {
				console.log("AppComponents: Running on iOS device");
				this.DevicePlatform = "iOS";
			}
				
			// If running on a device, register/initialize Push service
			console.log('AppComponents: Check device for push setup');
			if (this.DevicePlatform == "iOS" || this.DevicePlatform == "Android") {

				console.log('AppComponents: Running on a device');
				
				this.initOneSignalNotification();

			} else {
				
				console.log('AppComponents: Running in a browser');
				
			}
		
			// Image-Loader Settings
			console.log('AppComponents: Setting Image Loader defaults');
			//this.imageLoaderConfig.enableDebugMode();	// enable debug mode to get console logs and stuff
			//this.imageLoaderConfig.setFallbackUrl('assets/personIcon.png');	// set a fallback url to use by default in case an image is not found
			this.imageLoaderConfig.setImageReturnType('base64');
			this.imageLoaderConfig.setConcurrency(5); // Concurrent connections

			// Spinner settings
			//this.imageLoaderConfig.setSpinnerColor('secondary');
			//this.imageLoaderConfig.setSpinnerName('bubbles');

			// Caching settings
		    //this.imageLoaderConfig.maxCacheSize = 2 * 1024 * 1024;	// 2 MB
			this.imageLoaderConfig.maxCacheAge = 60 * 1000;			// 1 minute
			//this.imageLoaderConfig.maxCacheAge = 2 * 60 * 60 * 1000;	// 2 hours

			this.LoadSideMenuDashboard();

			console.log('AppComponents: Hiding splash screen');
			this.splashScreen.hide();
  
		});
	}
/*
	async enableIonicPro() {
		
		await this.pltfrm.ready();

		if (this.pltfrm.is('cordova')) {
			try {
				
				const config = {
					'appId': '7f61300b',
					'appVersion': '4.0.0'
				}

				//this.ionicPro = new Pro(config);
				this.ionicPro = new Pro('7f61300b', {appVersion: "4.0.0", channelName: "Production"});
				//this.ionicPro = new Pro();
				this.appInfo = await this.ionicPro.getAppInfo();
				this.deployInfo = await this.ionicPro.deploy.info();

				console.log('Ionic Pro app info: ', this.appInfo, this.deployInfo);
			} catch (ex) {
				console.log('Ionic Pro error: ' + JSON.stringify(ex));
			}
		}
		
	}
*/
	// OneSignal Push
	initOneSignalNotification()
	{
		console.log('AppComponents: Setting up OneSignal');
		
		this.oneSignal.startInit('3d75a1b2-b9c5-4c5c-a8c7-f27d7c6451ae', '808987243797');

		this.oneSignal.inFocusDisplaying(this.oneSignal.OSInFocusDisplayOption.InAppAlert);

		this.oneSignal.handleNotificationReceived().subscribe((data) => {
			// do something when notification is received
			console.log('oneSignal.handleNotificationReceived: Message received');
			console.log('oneSignal.handleNotificationReceived: ' + JSON.stringify(data));
			var pnTitle = data.payload.title;
			var pnMessage = data.payload.body;
			console.log('Title: ' + data.payload.title);
			console.log('Body: ' + data.payload.body);
			
			var CurrentDateTime = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
			var AttendeeID = this.localstorage.getLocalValue('AttendeeID');
			
			var flags = "ps|0|0|" + pnTitle + "|" + pnMessage + "|" + CurrentDateTime;
			
			this.databaseprovider.getMessagingData(flags, AttendeeID).then(data2 => {
				console.log("getMessagingData: " + JSON.stringify(data2));
			}).catch(function () {
				console.log("OneSignal Promise Rejected");
			});
		});

		this.oneSignal.handleNotificationOpened().subscribe((data) => {
			// Show the message in full if the app was not in focus when received.
			console.log('oneSignal.handleNotificationOpened: ' + data.notification.payload.title);
			//console.log('AppFocus: ' + data.notification.isAppInFocus);
			//console.log('Title: ' + data.notification.payload.title);
			//console.log('Body: ' + data.notification.payload.body);
			if (data.notification.isAppInFocus == false) {
				let alert = this.alertCtrl.create({
					title: data.notification.payload.title,
					subTitle: data.notification.payload.body,
					buttons: ['OK']
				});

				alert.present();
			}
		});

		// Only turn this line on when doing development work
		// It sends very verbose messages to the screen for each event received
		//this.oneSignal.setLogLevel({logLevel: 6, visualLevel: 6});
		
		this.oneSignal.endInit();

		//this.oneSignal.sendTag("LoginID","900000");
		
		this.oneSignal.getIds().then((id) => {
			//console.log('OneSignal IDs: ' + JSON.stringify(id));
			console.log('PlayerID: ' + id.userId);
			this.localstorage.setLocalValue('PlayerID', id.userId);
		});
	
		//this.oneSignal.getTags(function(tags) {
		//	console.log('OneSignal tags: ' + JSON.stringify(tags));
		//});
		
		console.log('AppComponents: OneSignal setup complete');
	}

	



	// The following pages require the user to be logged in.
	// If not, go to login page before continuing on
	// otherwise, go to requested page.
	NavigateToAuthenticatedPage(PageID) {
		
		var AttendeeID = this.localstorage.getLocalValue('AttendeeID');

		if (AttendeeID !='' && AttendeeID != null) {

			this.localstorage.setLocalValue('LoginWarning', '0');
			this.localstorage.setLocalValue('ForwardingPage', '');
			switch(PageID) {
				case "MyAgenda":
					this.navCtrl.push(MyAgenda, {}, {animate: true, direction: 'forward'});
					break;
				case "MyAgendaFull":
					this.navCtrl.push(MyAgendaFull, {}, {animate: true, direction: 'forward'});
					break;
				case "Notes":
					this.navCtrl.push(NotesPage, {}, {animate: true, direction: 'forward'});
					break;
			}
			
		} else {
			
			this.localstorage.setLocalValue('LoginWarning', '1');
			this.localstorage.setLocalValue('ForwardingPage', PageID);
			this.menuCtrl.close();
			this.navCtrl.push(LoginPage, {}, {animate: true, direction: 'forward'});

		}
			
	
	}
	
    EventDetails(EventID) {
		
		console.log("AppComponents: Btn ID: " + EventID);
		
        var IDSplit = EventID.split("|");

        var storeEventID = IDSplit[0].replace("'","");
        var storePersonalEventID = IDSplit[1].replace("'", "");
		console.log("AppComponents: storeEventID: " + storeEventID);
		console.log("AppComponents: storePersonalEventID: " + storePersonalEventID);

        if (storeEventID == "0" && storePersonalEventID == "0") {
            // Do nothing
        } else {
            if (storeEventID == "0") {

                // Set EventID to LocalStorage
				this.localstorage.setLocalValue('PersonalEventID', storePersonalEventID);

                // Navigate to Personal Event Details page
				this.menuCtrl.close();
				this.navCtrl.push('MyAgendaPersonal', {EventID: storePersonalEventID}, {animate: true, direction: 'forward'});

            } else {

                // Set EventID to LocalStorage
				this.localstorage.setLocalValue('EventID', storeEventID);

                // Navigate to Education Details page
				this.menuCtrl.close();
				this.navCtrl.push('EducationDetailsPage', {EventID: storeEventID}, {animate: true, direction: 'forward'});

            }
        }
    };

	openPage(page) {

		console.log('AppComponents: Selected side menu item: ' + page.title);
		
		var AttendeeID = this.localstorage.getLocalValue('AttendeeID');

		if (AttendeeID !='' && AttendeeID != null) {

			this.localstorage.setLocalValue('LoginWarning', '0');
			this.localstorage.setLocalValue('ForwardingPage', '');
			switch(page.naventry) {
				case "MyAgenda":
					this.navCtrl.push(MyAgenda, {}, {animate: true, direction: 'forward'});
					break;
				case "Notes":
					this.navCtrl.push(NotesPage, {}, {animate: true, direction: 'forward'});
					break;
				default:
					this.navCtrl.setRoot(page.component);
					this.activePage = page;
					break;
			}
			
		} else {
			
			this.localstorage.setLocalValue('ForwardingPage', page.naventry);
			switch(page.naventry) {
				case "MyAgenda":
					this.localstorage.setLocalValue('LoginWarning', '1');
					this.navCtrl.push(LoginPage, {}, {animate: true, direction: 'forward'});
					break;
				case "MyAgendaFull":
					this.localstorage.setLocalValue('LoginWarning', '1');
					this.navCtrl.push(LoginPage, {}, {animate: true, direction: 'forward'});
					break;
				case "Notes":
					this.localstorage.setLocalValue('LoginWarning', '1');
					this.navCtrl.push(LoginPage, {}, {animate: true, direction: 'forward'});
					break;
				case "EventSurvey":
					this.localstorage.setLocalValue('LoginWarning', '1');
					this.navCtrl.push(LoginPage, {}, {animate: true, direction: 'forward'});
					break;
				case "Profile":
					this.localstorage.setLocalValue('LoginWarning', '1');
					this.navCtrl.push(LoginPage, {}, {animate: true, direction: 'forward'});
					break;
				default:
					this.navCtrl.setRoot(page.component);
					this.activePage = page;
					break;
			}

		}

		// Reset the content nav to have just this page
		// we wouldn't want the back button to show in this scenario
		//this.navCtrl.setRoot(page.component);
		//this.activePage = page;
		
	}

	checkActive(page){
		return page == this.activePage;
	}

	navToWebsite() {

        var WebsiteURL = "http://www.clearthunder.com/sandiego";

		// Open website
		window.open(WebsiteURL, '_system');

    }
	
}







